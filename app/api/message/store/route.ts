import { getServerSession } from "next-auth/next";
import dbConnect from "@/lib/mongoose";
import { authOptions } from "@/lib/auth";
import { NextResponse } from "next/server";
import Message from "@/models/message";
import User from "@/models/user";

export async function POST(req: Request) {
  console.log("req", req);
  try {
    const session = await getServerSession(authOptions);
    console.log("session", session);

    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    await dbConnect();

    const { chatId, content, role } = await req.json();

    console.log(content, chatId, role, "req body");

    // Store message with preserved newlines and HTML
    const message = await Message.create({
      chatId,
      content: content
        .replace(/\n/g, "\\n")
        // Don't escape HTML - we'll trust the content since it's generated by our system
        .replace(/\\/g, "\\\\"), // Only escape backslashes,
      role,
    });

    // Store user message limit
    const user = await User.findOne({ _id: session.user.id });

    console.log("user", user);
    if (!user) {
      return NextResponse.json({ error: "User not found" }, { status: 404 });
    }

    user.messageLimit += 1;

    await user.save();
    console.log("after saving", user);
    return NextResponse.json({ messageId: message._id });
  } catch (error: any) {
    console.error(error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

// get last message
export const GET = async (req: Request) => {
  try {
    const session = await getServerSession(authOptions);

    if (!session) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    await dbConnect();

    const { chatId } = await req.json();

    const lastMessage = await Message.findOne({ chatId })
      .sort({ createdAt: -1 })
      .limit(1);

    return NextResponse.json(lastMessage);
  } catch (error: any) {
    console.error(error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
};